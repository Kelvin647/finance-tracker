{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\finance-tracker\\\\frontend\\\\src\\\\components\\\\analytics\\\\MonthlyTrends.jsx\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst MonthlyTrends = ({\n  transactions\n}) => {\n  // Process transactions data for monthly trends\n  const monthlyData = {};\n  transactions.forEach(transaction => {\n    const date = new Date(transaction.date);\n    const monthYear = `${date.getFullYear()}-${date.getMonth() + 1}`;\n    if (!monthlyData[monthYear]) {\n      monthlyData[monthYear] = {\n        income: 0,\n        expense: 0\n      };\n    }\n    if (transaction.type === 'income') {\n      monthlyData[monthYear].income += transaction.amount;\n    } else {\n      monthlyData[monthYear].expense += transaction.amount;\n    }\n  });\n  const sortedMonths = Object.keys(monthlyData).sort();\n  const labels = sortedMonths.map(month => {\n    const [year, monthNum] = month.split('-');\n    return new Date(year, monthNum - 1).toLocaleDateString('default', {\n      month: 'short',\n      year: 'numeric'\n    });\n  });\n  const data = {\n    labels,\n    datasets: [{\n      label: 'Income',\n      data: sortedMonths.map(month => monthlyData[month].income),\n      borderColor: '#4cc9f0',\n      backgroundColor: 'rgba(76, 201, 240, 0.5)',\n      tension: 0.3\n    }, {\n      label: 'Expenses',\n      data: sortedMonths.map(month => monthlyData[month].expense),\n      borderColor: '#f72585',\n      backgroundColor: 'rgba(247, 37, 133, 0.5)',\n      tension: 0.3\n    }]\n  };\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Monthly Trends'\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Monthly Trends\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: data,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_c = MonthlyTrends;\nexport default MonthlyTrends;\nvar _c;\n$RefreshReg$(_c, \"MonthlyTrends\");","map":{"version":3,"names":["React","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","MonthlyTrends","transactions","monthlyData","forEach","transaction","date","Date","monthYear","getFullYear","getMonth","income","expense","type","amount","sortedMonths","Object","keys","sort","labels","map","month","year","monthNum","split","toLocaleDateString","data","datasets","label","borderColor","backgroundColor","tension","options","responsive","plugins","legend","position","title","display","text","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HP/finance-tracker/frontend/src/components/analytics/MonthlyTrends.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\r\n\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nconst MonthlyTrends = ({ transactions }) => {\r\n  // Process transactions data for monthly trends\r\n  const monthlyData = {};\r\n  transactions.forEach(transaction => {\r\n    const date = new Date(transaction.date);\r\n    const monthYear = `${date.getFullYear()}-${date.getMonth() + 1}`;\r\n    \r\n    if (!monthlyData[monthYear]) {\r\n      monthlyData[monthYear] = { income: 0, expense: 0 };\r\n    }\r\n    \r\n    if (transaction.type === 'income') {\r\n      monthlyData[monthYear].income += transaction.amount;\r\n    } else {\r\n      monthlyData[monthYear].expense += transaction.amount;\r\n    }\r\n  });\r\n\r\n  const sortedMonths = Object.keys(monthlyData).sort();\r\n  const labels = sortedMonths.map(month => {\r\n    const [year, monthNum] = month.split('-');\r\n    return new Date(year, monthNum - 1).toLocaleDateString('default', { month: 'short', year: 'numeric' });\r\n  });\r\n\r\n  const data = {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        label: 'Income',\r\n        data: sortedMonths.map(month => monthlyData[month].income),\r\n        borderColor: '#4cc9f0',\r\n        backgroundColor: 'rgba(76, 201, 240, 0.5)',\r\n        tension: 0.3,\r\n      },\r\n      {\r\n        label: 'Expenses',\r\n        data: sortedMonths.map(month => monthlyData[month].expense),\r\n        borderColor: '#f72585',\r\n        backgroundColor: 'rgba(247, 37, 133, 0.5)',\r\n        tension: 0.3,\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: 'top',\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: 'Monthly Trends',\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <h3>Monthly Trends</h3>\r\n      <Line data={data} options={options} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MonthlyTrends;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}