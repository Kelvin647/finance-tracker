{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\finance-tracker\\\\frontend\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [authMessage, setAuthMessage] = useState('');\n  const [isSuccess, setIsSuccess] = useState(false);\n  const getTimeBasedGreeting = () => {\n    const hour = new Date().getHours();\n    if (hour < 12) return 'Good morning';\n    if (hour < 18) return 'Good afternoon';\n    return 'Good evening';\n  };\n  const register = async formData => {\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // In a real app, you would use:\n      // const res = await axios.post('/api/auth/register', formData);\n\n      setUser({\n        username: formData.username,\n        email: formData.email\n      });\n      setAuthMessage(`You have successfully registered. Welcome ${formData.username}!`);\n      setIsSuccess(true);\n\n      // Clear message after 5 seconds\n      setTimeout(() => {\n        setAuthMessage('');\n        setIsSuccess(false);\n      }, 5000);\n      return true;\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setAuthMessage(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Registration failed');\n      setIsSuccess(false);\n      return false;\n    }\n  };\n  const login = async formData => {\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // In a real app, you would use:\n      // const res = await axios.post('/api/auth/login', formData);\n\n      setUser({\n        username: 'DemoUser',\n        // In real app: res.data.user.username\n        email: formData.email\n      });\n      const greeting = getTimeBasedGreeting();\n      setAuthMessage(`${greeting}, DemoUser!`); // In real app: res.data.user.username\n      setIsSuccess(true);\n\n      // Clear message after 5 seconds\n      setTimeout(() => {\n        setAuthMessage('');\n        setIsSuccess(false);\n      }, 5000);\n      return true;\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setAuthMessage(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Login failed');\n      setIsSuccess(false);\n      return false;\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    setAuthMessage('You have been logged out');\n    setIsSuccess(true);\n    setTimeout(() => {\n      setAuthMessage('');\n      setIsSuccess(false);\n    }, 3000);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      authMessage,\n      isSuccess,\n      register,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"2X13d6OgVnyXfRzmaCZTcjuov/s=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","authMessage","setAuthMessage","isSuccess","setIsSuccess","getTimeBasedGreeting","hour","Date","getHours","register","formData","Promise","resolve","setTimeout","username","email","err","_err$response","_err$response$data","response","data","message","login","greeting","_err$response2","_err$response2$data","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HP/finance-tracker/frontend/src/context/AuthContext.jsx"],"sourcesContent":["import { createContext, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [authMessage, setAuthMessage] = useState('');\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n\r\n  const getTimeBasedGreeting = () => {\r\n    const hour = new Date().getHours();\r\n    if (hour < 12) return 'Good morning';\r\n    if (hour < 18) return 'Good afternoon';\r\n    return 'Good evening';\r\n  };\r\n\r\n  const register = async (formData) => {\r\n    try {\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      // In a real app, you would use:\r\n      // const res = await axios.post('/api/auth/register', formData);\r\n      \r\n      setUser({\r\n        username: formData.username,\r\n        email: formData.email\r\n      });\r\n      \r\n      setAuthMessage(`You have successfully registered. Welcome ${formData.username}!`);\r\n      setIsSuccess(true);\r\n      \r\n      // Clear message after 5 seconds\r\n      setTimeout(() => {\r\n        setAuthMessage('');\r\n        setIsSuccess(false);\r\n      }, 5000);\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      setAuthMessage(err.response?.data?.message || 'Registration failed');\r\n      setIsSuccess(false);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const login = async (formData) => {\r\n    try {\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      // In a real app, you would use:\r\n      // const res = await axios.post('/api/auth/login', formData);\r\n      \r\n      setUser({\r\n        username: 'DemoUser', // In real app: res.data.user.username\r\n        email: formData.email\r\n      });\r\n      \r\n      const greeting = getTimeBasedGreeting();\r\n      setAuthMessage(`${greeting}, DemoUser!`); // In real app: res.data.user.username\r\n      setIsSuccess(true);\r\n      \r\n      // Clear message after 5 seconds\r\n      setTimeout(() => {\r\n        setAuthMessage('');\r\n        setIsSuccess(false);\r\n      }, 5000);\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      setAuthMessage(err.response?.data?.message || 'Login failed');\r\n      setIsSuccess(false);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setAuthMessage('You have been logged out');\r\n    setIsSuccess(true);\r\n    \r\n    setTimeout(() => {\r\n      setAuthMessage('');\r\n      setIsSuccess(false);\r\n    }, 3000);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ \r\n      user, \r\n      authMessage,\r\n      isSuccess,\r\n      register, \r\n      login, \r\n      logout \r\n    }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMc,oBAAoB,GAAGA,CAAA,KAAM;IACjC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;IAClC,IAAIF,IAAI,GAAG,EAAE,EAAE,OAAO,cAAc;IACpC,IAAIA,IAAI,GAAG,EAAE,EAAE,OAAO,gBAAgB;IACtC,OAAO,cAAc;EACvB,CAAC;EAED,MAAMG,QAAQ,GAAG,MAAOC,QAAQ,IAAK;IACnC,IAAI;MACF;MACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;MAEvD;MACA;;MAEAZ,OAAO,CAAC;QACNc,QAAQ,EAAEJ,QAAQ,CAACI,QAAQ;QAC3BC,KAAK,EAAEL,QAAQ,CAACK;MAClB,CAAC,CAAC;MAEFb,cAAc,CAAC,6CAA6CQ,QAAQ,CAACI,QAAQ,GAAG,CAAC;MACjFV,YAAY,CAAC,IAAI,CAAC;;MAElB;MACAS,UAAU,CAAC,MAAM;QACfX,cAAc,CAAC,EAAE,CAAC;QAClBE,YAAY,CAAC,KAAK,CAAC;MACrB,CAAC,EAAE,IAAI,CAAC;MAER,OAAO,IAAI;IACb,CAAC,CAAC,OAAOY,GAAG,EAAE;MAAA,IAAAC,aAAA,EAAAC,kBAAA;MACZhB,cAAc,CAAC,EAAAe,aAAA,GAAAD,GAAG,CAACG,QAAQ,cAAAF,aAAA,wBAAAC,kBAAA,GAAZD,aAAA,CAAcG,IAAI,cAAAF,kBAAA,uBAAlBA,kBAAA,CAAoBG,OAAO,KAAI,qBAAqB,CAAC;MACpEjB,YAAY,CAAC,KAAK,CAAC;MACnB,OAAO,KAAK;IACd;EACF,CAAC;EAED,MAAMkB,KAAK,GAAG,MAAOZ,QAAQ,IAAK;IAChC,IAAI;MACF;MACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;MAEvD;MACA;;MAEAZ,OAAO,CAAC;QACNc,QAAQ,EAAE,UAAU;QAAE;QACtBC,KAAK,EAAEL,QAAQ,CAACK;MAClB,CAAC,CAAC;MAEF,MAAMQ,QAAQ,GAAGlB,oBAAoB,CAAC,CAAC;MACvCH,cAAc,CAAC,GAAGqB,QAAQ,aAAa,CAAC,CAAC,CAAC;MAC1CnB,YAAY,CAAC,IAAI,CAAC;;MAElB;MACAS,UAAU,CAAC,MAAM;QACfX,cAAc,CAAC,EAAE,CAAC;QAClBE,YAAY,CAAC,KAAK,CAAC;MACrB,CAAC,EAAE,IAAI,CAAC;MAER,OAAO,IAAI;IACb,CAAC,CAAC,OAAOY,GAAG,EAAE;MAAA,IAAAQ,cAAA,EAAAC,mBAAA;MACZvB,cAAc,CAAC,EAAAsB,cAAA,GAAAR,GAAG,CAACG,QAAQ,cAAAK,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAAcJ,IAAI,cAAAK,mBAAA,uBAAlBA,mBAAA,CAAoBJ,OAAO,KAAI,cAAc,CAAC;MAC7DjB,YAAY,CAAC,KAAK,CAAC;MACnB,OAAO,KAAK;IACd;EACF,CAAC;EAED,MAAMsB,MAAM,GAAGA,CAAA,KAAM;IACnB1B,OAAO,CAAC,IAAI,CAAC;IACbE,cAAc,CAAC,0BAA0B,CAAC;IAC1CE,YAAY,CAAC,IAAI,CAAC;IAElBS,UAAU,CAAC,MAAM;MACfX,cAAc,CAAC,EAAE,CAAC;MAClBE,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,oBACEV,OAAA,CAACC,WAAW,CAACgC,QAAQ;IAACC,KAAK,EAAE;MAC3B7B,IAAI;MACJE,WAAW;MACXE,SAAS;MACTM,QAAQ;MACRa,KAAK;MACLI;IACF,CAAE;IAAA7B,QAAA,EACCA;EAAQ;IAAAgC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAClC,EAAA,CAhGWF,YAAY;AAAAqC,EAAA,GAAZrC,YAAY;AAkGzB,eAAeD,WAAW;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}